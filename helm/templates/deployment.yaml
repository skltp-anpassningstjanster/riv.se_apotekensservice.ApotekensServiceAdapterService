apiVersion: apps/v1
kind: Deployment
metadata:
  name: apse-adapter
  labels:
    {{- include "apse-adapter.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "apse-adapter.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "apse-adapter.selectorLabels" . | nindent 8 }}
    spec:
      volumes:
        - name: application-properties
          configMap:
            name: application-properties-configmap
        # Activate when we've got vp-certs fixed
        # - name: certs
        #   secret:
        #     secretName: apse-secret-certs
        - name: log4j
          configMap:
            name: log4j2-configmap
        - name: trust-pem-vol
          secret:
            secretName: {{ .Values.pem_to_pfx.trust.secretName }}
        - name: producer-pem-vol
          secret:
            secretName: {{ .Values.pem_to_pfx.producer.secretName }}
        {{ if .Values.pem_to_pfx.consumer }}
        - name: consumer-pem-vol
          secret:
            secretName: {{ .Values.pem_to_pfx.consumer.secretName }}
        {{- end }}
        - name: pkcs12-volume
        - name: data-volume

      imagePullSecrets:
        - name: regcred

      initContainers:
        - name: {{ .Values.initContainer.certGen.image.name }}
          image: "{{ .Values.repository }}{{ .Values.initContainer.certGen.image.name }}:{{ .Values.initContainer.certGen.image.tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.initContainer.certGen.image.pullPolicy | default "Always" }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: pkcs12-volume
              mountPath: /opt/certs/pkcs12
              {{- with .Values.pem_to_pfx }}
            - name: trust-pem-vol
              mountPath: {{ .pem.path }}/{{ .trust.pemFile }}
              subPath: ca.crt
            - name: producer-pem-vol
              mountPath: {{ .pem.path }}/{{ .producer.pemKeyFile }}
              subPath: tls.key
            - name: producer-pem-vol
              mountPath: {{ .pem.path }}/{{ .producer.pemCertFile }}
              subPath: tls.crt
              {{ if .consumer }}
            - name: consumer-pem-vol
              mountPath: {{ .pem.path }}/{{ .consumer.pemKeyFile }}
              subPath: tls.key
            - name: consumer-pem-vol
              mountPath: {{ .pem.path }}/{{ .consumer.pemCertFile }}
              subPath: tls.crt
              {{- end }}
              {{- end }}
          envFrom:
            - configMapRef:
                name: apse-pem-to-pfx-cm


      containers:
        - name: apse-adapter
          image: {{ .Values.repository }}apse-adapter:{{ .Values.container.image.tag | default .Chart.AppVersion }}
          imagePullPolicy: {{ .Values.container.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          lifecycle:
            preStop:
              exec:
                command: ["sleep", "10"]
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: actuator/health/liveness
              port: 8089
              scheme: HTTP
            initialDelaySeconds: 90
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: actuator/health/readiness
              port: 8089
              scheme: HTTP
            initialDelaySeconds: 40
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          envFrom:
            {{- range $.Values.environment.variables._default_config_maps }}
            - configMapRef:
                name: {{ . }}
            {{- end }}
            {{- range $.Values.environment.variables.config_maps }}
            - configMapRef:
                name: {{ . }}
            {{- end }}
            {{- range $.Values.environment.variables.secrets }}
            - secretRef:
                name: {{ . }}
            {{- end }}
            {{ if .Values.pem_to_pfx }}
            - configMapRef:
                name: generated-pfx-values
            {{- end }}

          volumeMounts:
            - name: application-properties
              mountPath: /opt/apse/config/application-properties
              readOnly: true
            # Activate when we've got vp-certs fixed
            # - name: certs
            #   mountPath: /opt/apse/certs
            #   readOnly: true
            - name: log4j
              mountPath: /opt/apse/config/log4j
              readOnly: true
            - name: pkcs12-volume
              mountPath: {{ .Values.pem_to_pfx.pfx.path }}
